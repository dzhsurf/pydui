:py:mod:`pydui`
===============

.. py:module:: pydui

.. autoapi-nested-parse::

   PyDui-GTK modules.

   core: Core module
       - PyDuiApplication
       - PyDuiBuilder
       - PyDuiWindow, PyDuiWindowHandler
       - PyDuiWidget, PyDuiLayout
       - PyDuiUtils

   widgets: Widget module
       - Label, Button, Text, Edit, ...

   layout: Layout module
       - HLayout
       - VLayout
       - FixedLayout
       - FitLayout



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   core/index.rst
   layout/index.rst
   widgets/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pydui.PyDuiApplication
   pydui.PyDuiBuilder
   pydui.PyDuiLayout
   pydui.PyDuiConstraint
   pydui.PyDuiWidget
   pydui.PyDuiRenderManager
   pydui.PyDuiWindowConfig
   pydui.PyDuiWindow
   pydui.PyDuiWindowHandler
   pydui.PyDuiFitLayout
   pydui.PyDuiFixedLayout
   pydui.PyDuiHLayout
   pydui.PyDuiVLayout
   pydui.PyDuiConstraint
   pydui.PyDuiWidget
   pydui.PyDuiRenderManager
   pydui.PyDuiWindowConfig
   pydui.PyDuiWindow
   pydui.PyDuiWindowHandler
   pydui.PyDuiConstraint
   pydui.PyDuiWidget




.. py:class:: PyDuiApplication

   Application global function

   .. py:method:: main_run()
      :staticmethod:

      Start main run-loop


   .. py:method:: main_quit()
      :staticmethod:

      Quit main run-loop



.. py:class:: PyDuiBuilder

   Build Widget, Window from xml resource

   .. py:method:: build_widget(path: str) -> pydui.layout.vlayout.PyDuiWidget
      :staticmethod:

      Build widget from path

      :param path: xml resource path
      :type path: str

      :returns: return the widget
      :rtype: PyDuiWidget


   .. py:method:: build_window(path: str) -> pydui.core.window.PyDuiWindow
      :staticmethod:

      Build window from path and handler

      :param path: xml resource path
      :type path: str

      :returns: return window object.
      :rtype: PyDuiWindow



.. py:class:: PyDuiLayout

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: inset() -> tuple[int, int, int, int]
      :property:

      Return widget inset

      The value in tuple means [left, top, right, bottom]

      :returns: return inset.
      :rtype: tuple[int, int, int, int]



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :int = 0

      

   .. py:attribute:: max_width
      :annotation: :int

      

   .. py:attribute:: min_height
      :annotation: :int = 0

      

   .. py:attribute:: max_height
      :annotation: :int

      


.. py:class:: PyDuiWidget

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: parent() -> Optional[PyDuiWidget]
      :property:


   .. py:method:: size() -> tuple[int, int]
      :property:


   .. py:method:: width() -> int
      :property:


   .. py:method:: height() -> int
      :property:


   .. py:method:: request_size() -> tuple[int, int]
      :property:


   .. py:method:: request_width() -> int
      :property:


   .. py:method:: request_height() -> int
      :property:


   .. py:method:: xy() -> tuple[int, int]
      :property:


   .. py:method:: x() -> int
      :property:


   .. py:method:: y() -> int
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: padding() -> tuple[int, int, int, int]
      :property:


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> str
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiRenderManager

   Bases: :py:obj:`object`

   Render manager

   .. py:method:: get_widget(widget_id: str) -> Optional[PyDuiWidget]



.. py:class:: PyDuiWindowConfig

   Window config dataclass

   .. attribute:: title

      window title

      :type: str

   .. attribute:: size

      window size, default is (400, 300)

      :type: tuple[int, int]

   .. attribute:: min_size

      window min size, default is (0, 0)

      :type: tuple[int, int]

   .. attribute:: max_size

      window max size, default is (0, 0), when set to zero, means no limit.

      :type: tuple[int, int]

   .. attribute:: positon

      window initial position

      :type: Gtk.WindowPosition

   .. py:attribute:: title
      :annotation: :str

      

   .. py:attribute:: size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: min_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: max_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: position
      :annotation: :gi.repository.Gtk.WindowPosition

      


.. py:class:: PyDuiWindow(config: PyDuiWindowConfig, rootview: PyDuiWidget, handler: Type[PyDuiWindowHandler] = None)

   Bases: :py:obj:`object`

   Window object

   .. py:method:: show()


   .. py:method:: get_widget(widget_id: str) -> Optional[PyDuiWidget]



.. py:class:: PyDuiWindowHandler(window: PyDuiWindow)

   Bases: :py:obj:`object`

   .. py:method:: window() -> PyDuiWindow


   .. py:method:: on_window_show()


   .. py:method:: on_window_destroy()



.. py:class:: PyDuiFitLayout

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   FitLayout implement


.. py:class:: PyDuiFixedLayout

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   FixedLayout implement


.. py:class:: PyDuiHLayout

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Horizontal layout


.. py:class:: PyDuiVLayout

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Vertical layout


.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :int = 0

      

   .. py:attribute:: max_width
      :annotation: :int

      

   .. py:attribute:: min_height
      :annotation: :int = 0

      

   .. py:attribute:: max_height
      :annotation: :int

      


.. py:class:: PyDuiWidget

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: parent() -> Optional[PyDuiWidget]
      :property:


   .. py:method:: size() -> tuple[int, int]
      :property:


   .. py:method:: width() -> int
      :property:


   .. py:method:: height() -> int
      :property:


   .. py:method:: request_size() -> tuple[int, int]
      :property:


   .. py:method:: request_width() -> int
      :property:


   .. py:method:: request_height() -> int
      :property:


   .. py:method:: xy() -> tuple[int, int]
      :property:


   .. py:method:: x() -> int
      :property:


   .. py:method:: y() -> int
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: padding() -> tuple[int, int, int, int]
      :property:


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> str
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiRenderManager

   Bases: :py:obj:`object`

   Render manager

   .. py:method:: get_widget(widget_id: str) -> Optional[PyDuiWidget]



.. py:class:: PyDuiWindowConfig

   Window config dataclass

   .. attribute:: title

      window title

      :type: str

   .. attribute:: size

      window size, default is (400, 300)

      :type: tuple[int, int]

   .. attribute:: min_size

      window min size, default is (0, 0)

      :type: tuple[int, int]

   .. attribute:: max_size

      window max size, default is (0, 0), when set to zero, means no limit.

      :type: tuple[int, int]

   .. attribute:: positon

      window initial position

      :type: Gtk.WindowPosition

   .. py:attribute:: title
      :annotation: :str

      

   .. py:attribute:: size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: min_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: max_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: position
      :annotation: :gi.repository.Gtk.WindowPosition

      


.. py:class:: PyDuiWindow(config: PyDuiWindowConfig, rootview: PyDuiWidget, handler: Type[PyDuiWindowHandler] = None)

   Bases: :py:obj:`object`

   Window object

   .. py:method:: show()


   .. py:method:: get_widget(widget_id: str) -> Optional[PyDuiWidget]



.. py:class:: PyDuiWindowHandler(window: PyDuiWindow)

   Bases: :py:obj:`object`

   .. py:method:: window() -> PyDuiWindow


   .. py:method:: on_window_show()


   .. py:method:: on_window_destroy()



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :int = 0

      

   .. py:attribute:: max_width
      :annotation: :int

      

   .. py:attribute:: min_height
      :annotation: :int = 0

      

   .. py:attribute:: max_height
      :annotation: :int

      


.. py:class:: PyDuiWidget

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: parent() -> Optional[PyDuiWidget]
      :property:


   .. py:method:: size() -> tuple[int, int]
      :property:


   .. py:method:: width() -> int
      :property:


   .. py:method:: height() -> int
      :property:


   .. py:method:: request_size() -> tuple[int, int]
      :property:


   .. py:method:: request_width() -> int
      :property:


   .. py:method:: request_height() -> int
      :property:


   .. py:method:: xy() -> tuple[int, int]
      :property:


   .. py:method:: x() -> int
      :property:


   .. py:method:: y() -> int
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: padding() -> tuple[int, int, int, int]
      :property:


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> str
      :property:


   .. py:method:: bkimage() -> str
      :property:



