:py:mod:`pydui`
===============

.. py:module:: pydui

.. autoapi-nested-parse::

   PyDui-GTK modules.

   core: Core module
       - PyDuiApplication
       - PyDuiBuilder
       - PyDuiWindow, PyDuiWindowHandler
       - PyDuiWidget, PyDuiLayout
       - PyDuiUtils

   widgets: Widget module
       - Label, Button, Text, Edit, ...

   layout: Layout module
       - HLayout
       - VLayout
       - FixedLayout
       - FitLayout



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   core/index.rst
   layout/index.rst
   widgets/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pydui.PyDuiApplication
   pydui.PyDuiResourceLoader
   pydui.PyDuiBuilder
   pydui.PyDuiLayoutEstimateResult
   pydui.PyDuiLayout
   pydui.PyDuiLayoutEnum
   pydui.PyDuiTextAlign
   pydui.PyDuiRender
   pydui.PyDuiConstraint
   pydui.PyDuiWidget
   pydui.PyDuiWindowHandler
   pydui.PyDuiWindowConfig
   pydui.PyDuiWindow
   pydui.PyDuiRenderManager
   pydui.PyDuiRenderCanvas
   pydui.PyDuiFitLayout
   pydui.PyDuiFixedLayout
   pydui.PyDuiHLayout
   pydui.PyDuiVLayout
   pydui.PyDuiButton
   pydui.PyDuiLabel
   pydui.PyDuiRender
   pydui.PyDuiConstraint
   pydui.PyDuiWidget
   pydui.PyDuiLayoutEnum
   pydui.PyDuiTextAlign
   pydui.PyDuiWindowHandler
   pydui.PyDuiWindowConfig
   pydui.PyDuiWindow
   pydui.PyDuiLayoutEstimateResult
   pydui.PyDuiLayout
   pydui.PyDuiLayoutEnum
   pydui.PyDuiTextAlign
   pydui.PyDuiRender
   pydui.PyDuiConstraint
   pydui.PyDuiWidget
   pydui.PyDuiRenderManager
   pydui.PyDuiRenderCanvas



Functions
~~~~~~~~~

.. autoapisummary::

   pydui.Text2TextAlign
   pydui.Text2WrapMode
   pydui.Text2EllipsizeMode
   pydui.Text2TextAlign
   pydui.Text2WrapMode
   pydui.Text2EllipsizeMode
   pydui.Text2TextAlign
   pydui.Text2WrapMode
   pydui.Text2EllipsizeMode



.. py:class:: PyDuiApplication

   Application global function

   .. py:method:: main_run()
      :staticmethod:

      Start main run-loop


   .. py:method:: main_quit()
      :staticmethod:

      Quit main run-loop



.. py:class:: PyDuiResourceLoader

   Bases: :py:obj:`abc.ABC`

   PyDuiResourceLoader

   .. py:method:: scheme() -> str
      :abstractmethod:

      Return loader scheme


   .. py:method:: load_xml(path: str) -> str
      :abstractmethod:

      Load xml layout file


   .. py:method:: load_data(path: str) -> bytes
      :abstractmethod:

      Load data


   .. py:method:: load_string(id: str) -> str
      :abstractmethod:

      Load intl language text by text id



.. py:class:: PyDuiBuilder

   Build Widget, Window from xml resource

   .. py:method:: register_resource_loader(loader: pydui.widgets.label.Type[pydui.core.resource_loader.PyDuiResourceLoader])


   .. py:method:: get_loader() -> pydui.core.resource_loader.PyDuiResourceLoader


   .. py:method:: build_widget(path: str) -> pydui.widgets.label.PyDuiWidget

      Build widget from path

      :param path: xml resource path
      :type path: str

      :returns: return the widget
      :rtype: PyDuiWidget


   .. py:method:: build_window(path: str, handler: pydui.widgets.label.Type[pydui.core.window.PyDuiWindowHandler]) -> pydui.core.window.PyDuiWindow

      Build window from path and handler

      :param path: xml resource path
      :type path: str
      :param handler: handler class
      :type handler: Type[PyDuiWindowHandler]

      :returns: return window object.
      :rtype: PyDuiWindow



.. py:class:: PyDuiLayoutEstimateResult

   Estimate layout result

   .. py:attribute:: auto_layout_count
      :annotation: :int = 0

      

   .. py:attribute:: auto_layout_value
      :annotation: :int = 0

      

   .. py:attribute:: estimate_items
      :annotation: :list[int]

      


.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, layout_class: pydui.core.widget.PyDuiLayoutEnum, custom_gtk_widget: gi.repository.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.PyDuiWidget

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]



.. py:class:: PyDuiLayoutEnum

   Bases: :py:obj:`enum.Enum`

   Layout type enum

   .. attribute:: Undefine

      default

   .. attribute:: HLayout

      horizontal layout

   .. attribute:: VLayout

      vertical layout

   .. py:attribute:: NotLayout
      :annotation: = 0

      

   .. py:attribute:: HLayout
      :annotation: = 1

      

   .. py:attribute:: VLayout
      :annotation: = 2

      

   .. py:attribute:: FitLayout
      :annotation: = 3

      

   .. py:attribute:: FixedLayout
      :annotation: = 4

      

   .. py:attribute:: CustomLayout
      :annotation: = 10

      


.. py:class:: PyDuiTextAlign

   Bases: :py:obj:`enum.Enum`

   Text align

   .. py:attribute:: CENTER
      :annotation: = [0]

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:function:: Text2TextAlign(text: str) -> PyDuiTextAlign


.. py:function:: Text2WrapMode(text: str) -> gi.repository.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> gi.repository.Pango.EllipsizeMode


.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: gi.repository.Gdk.RBGA, x: float, y: float, w: float, h: float, canvas_width: float, canvas_height: float)
      :staticmethod:


   .. py:method:: DrawImage(ctx: pydui.core.widget.cairo.Context, image: str, xy: tuple[float, float], wh: tuple[float, float])
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, text: str, font: str, font_size: int, color: gi.repository.Gdk.RBGA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiTextAlign, pydui.core.widget.PyDuiTextAlign] = (PyDuiTextAlign.CENTER, PyDuiTextAlign.CENTER), ellipsis_mode: gi.repository.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: gi.repository.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 0.0)
      :staticmethod:


   .. py:method:: EstimateText(ctx: pydui.core.widget.cairo.Context, text: str, font_desc: str, limit_width: float = None, limit_height: float = None) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget, layout_class: pydui.core.base.PyDuiLayoutEnum = PyDuiLayoutEnum.NotLayout)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: set_render_manager(render_manager: PyDuiRenderManager)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: layout_class() -> pydui.core.base.PyDuiLayoutEnum
      :property:


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> gi.repository.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiWindowHandler

   Bases: :py:obj:`object`

   Window handler

   .. py:method:: on_window_init(window: PyDuiWindow)

      On window init event


   .. py:method:: on_window_destroy()

      On window destroy event


   .. py:method:: on_window_position_changed(x: float, y: float)

      On window position changed event

      :param x: x coordinate
      :type x: float
      :param y: y coordinate
      :type y: float


   .. py:method:: on_window_size_changed(w: float, h: float)

      On window size changed event

      :param w: window width
      :type w: float
      :param h: window height
      :type h: float


   .. py:method:: on_window_visible_changed(show: bool)

      On window visible changed event

      :param show: window is visible



.. py:class:: PyDuiWindowConfig

   Window config dataclass

   .. attribute:: title

      window title

      :type: str

   .. attribute:: size

      window size, default is (400, 300)

      :type: tuple[int, int]

   .. attribute:: min_size

      window min size, default is (0, 0)

      :type: tuple[int, int]

   .. attribute:: max_size

      window max size, default is (0, 0), when set to zero, means no limit.

      :type: tuple[int, int]

   .. attribute:: positon

      window initial position

      :type: Gtk.WindowPosition

   .. py:attribute:: title
      :annotation: :str

      

   .. py:attribute:: size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: min_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: max_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: position
      :annotation: :gi.repository.Gtk.WindowPosition

      


.. py:class:: PyDuiWindow(loader: pydui.core.render.Type[PyDuiResourceLoader], config: PyDuiWindowConfig, rootview: pydui.core.widget.PyDuiWidget, handler: pydui.core.render.Type[pydui.core.window_handler.PyDuiWindowHandler] = None)

   Bases: :py:obj:`object`

   Window object

   .. py:method:: get_gtk_window()


   .. py:method:: show()


   .. py:method:: get_widget(widget_id: str) -> pydui.core.widget.PyDuiWidget


   .. py:method:: handler() -> pydui.core.window_handler.PyDuiWindowHandler
      :property:



.. py:class:: PyDuiRenderManager(window: PyDuiWindow, loader: PyDuiResourceLoader)

   Bases: :py:obj:`object`

   Render manager

   .. py:method:: get_resource_loader()


   .. py:method:: default_fontcolor() -> gi.repository.Gdk.RGBA
      :property:

      return default font color, default is Gdk.RGBA(0.0, 0.0, 0.0, 1.0)

      :returns: return default font color
      :rtype: Gdk.RGBA


   .. py:method:: default_font_desc() -> str
      :property:

      return font desc in format f"{font_family} {font_size}"

      :returns: font desc
      :rtype: str


   .. py:method:: default_fontfamily() -> str
      :property:

      return default font family, default is Arial

      :returns: font family
      :rtype: str


   .. py:method:: default_fontsize() -> int
      :property:

      return default font size, default is 16

      :returns: font size
      :rtype: int


   .. py:method:: set_rootview(rootview: pydui.core.layout.PyDuiLayout)

      set window root view

      :param rootview: widnow root view
      :type rootview: PyDuiWidget


   .. py:method:: get_widget(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get widget by widget id

      :param widget_id: widget id
      :type widget_id: str



.. py:class:: PyDuiRenderCanvas(ondraw: callable, css=None, border_width=0)

   Bases: :py:obj:`gi.repository.Gtk.Frame`

   Render canvas

   .. py:method:: redraw()



.. py:class:: PyDuiFitLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   FitLayout implement


.. py:class:: PyDuiFixedLayout(parent: pydui.core.layout.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   FixedLayout implement


.. py:class:: PyDuiHLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Horizontal layout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)



.. py:class:: PyDuiVLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Vertical layout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)



.. py:class:: PyDuiButton(parent: pydui.widgets.label.PyDuiWidget)

   Bases: :py:obj:`pydui.widgets.label.PyDuiLabel`

   Button widget

   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]



.. py:class:: PyDuiLabel(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Label widget

   .. attribute:: text

      text content

      :type: str

   .. attribute:: font

      font family name

      :type: str

   .. attribute:: fontsize

      fontsize in pt unit

      :type: int

   .. attribute:: fontcolor

      font color

      :type: Gdk.RGBA

   .. attribute:: ellipsis

      ellipsis mode, [NONE, START, MIDDLE, END], default is END

      :type: str

   .. attribute:: wrap

      wrap mode, [NONE, WORD, CHAR, WORD_CHAR], default is WORD

      :type: str

   .. attribute:: halign

      horizontal TextAlign, [CENTER, STAET, END], default is CENTER

      :type: str

   .. attribute:: valign

      vertical TextAlign, [CENTER, STAET, END], default is CENTER

      :type: str

   .. attribute:: line_spacing

      line spacing

      :type: float

   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: draw_bkimage(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: draw_text(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)



.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: gi.repository.Gdk.RBGA, x: float, y: float, w: float, h: float, canvas_width: float, canvas_height: float)
      :staticmethod:


   .. py:method:: DrawImage(ctx: pydui.core.widget.cairo.Context, image: str, xy: tuple[float, float], wh: tuple[float, float])
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, text: str, font: str, font_size: int, color: gi.repository.Gdk.RBGA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiTextAlign, pydui.core.widget.PyDuiTextAlign] = (PyDuiTextAlign.CENTER, PyDuiTextAlign.CENTER), ellipsis_mode: gi.repository.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: gi.repository.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 0.0)
      :staticmethod:


   .. py:method:: EstimateText(ctx: pydui.core.widget.cairo.Context, text: str, font_desc: str, limit_width: float = None, limit_height: float = None) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget, layout_class: pydui.core.base.PyDuiLayoutEnum = PyDuiLayoutEnum.NotLayout)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: set_render_manager(render_manager: PyDuiRenderManager)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: layout_class() -> pydui.core.base.PyDuiLayoutEnum
      :property:


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> gi.repository.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiLayoutEnum

   Bases: :py:obj:`enum.Enum`

   Layout type enum

   .. attribute:: Undefine

      default

   .. attribute:: HLayout

      horizontal layout

   .. attribute:: VLayout

      vertical layout

   .. py:attribute:: NotLayout
      :annotation: = 0

      

   .. py:attribute:: HLayout
      :annotation: = 1

      

   .. py:attribute:: VLayout
      :annotation: = 2

      

   .. py:attribute:: FitLayout
      :annotation: = 3

      

   .. py:attribute:: FixedLayout
      :annotation: = 4

      

   .. py:attribute:: CustomLayout
      :annotation: = 10

      


.. py:class:: PyDuiTextAlign

   Bases: :py:obj:`enum.Enum`

   Text align

   .. py:attribute:: CENTER
      :annotation: = [0]

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:function:: Text2TextAlign(text: str) -> PyDuiTextAlign


.. py:function:: Text2WrapMode(text: str) -> gi.repository.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> gi.repository.Pango.EllipsizeMode


.. py:class:: PyDuiWindowHandler

   Bases: :py:obj:`object`

   Window handler

   .. py:method:: on_window_init(window: PyDuiWindow)

      On window init event


   .. py:method:: on_window_destroy()

      On window destroy event


   .. py:method:: on_window_position_changed(x: float, y: float)

      On window position changed event

      :param x: x coordinate
      :type x: float
      :param y: y coordinate
      :type y: float


   .. py:method:: on_window_size_changed(w: float, h: float)

      On window size changed event

      :param w: window width
      :type w: float
      :param h: window height
      :type h: float


   .. py:method:: on_window_visible_changed(show: bool)

      On window visible changed event

      :param show: window is visible



.. py:class:: PyDuiWindowConfig

   Window config dataclass

   .. attribute:: title

      window title

      :type: str

   .. attribute:: size

      window size, default is (400, 300)

      :type: tuple[int, int]

   .. attribute:: min_size

      window min size, default is (0, 0)

      :type: tuple[int, int]

   .. attribute:: max_size

      window max size, default is (0, 0), when set to zero, means no limit.

      :type: tuple[int, int]

   .. attribute:: positon

      window initial position

      :type: Gtk.WindowPosition

   .. py:attribute:: title
      :annotation: :str

      

   .. py:attribute:: size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: min_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: max_size
      :annotation: :tuple[int, int]

      

   .. py:attribute:: position
      :annotation: :gi.repository.Gtk.WindowPosition

      


.. py:class:: PyDuiWindow(loader: pydui.core.render.Type[PyDuiResourceLoader], config: PyDuiWindowConfig, rootview: pydui.core.widget.PyDuiWidget, handler: pydui.core.render.Type[pydui.core.window_handler.PyDuiWindowHandler] = None)

   Bases: :py:obj:`object`

   Window object

   .. py:method:: get_gtk_window()


   .. py:method:: show()


   .. py:method:: get_widget(widget_id: str) -> pydui.core.widget.PyDuiWidget


   .. py:method:: handler() -> pydui.core.window_handler.PyDuiWindowHandler
      :property:



.. py:class:: PyDuiLayoutEstimateResult

   Estimate layout result

   .. py:attribute:: auto_layout_count
      :annotation: :int = 0

      

   .. py:attribute:: auto_layout_value
      :annotation: :int = 0

      

   .. py:attribute:: estimate_items
      :annotation: :list[int]

      


.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, layout_class: pydui.core.widget.PyDuiLayoutEnum, custom_gtk_widget: gi.repository.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.PyDuiWidget

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]



.. py:class:: PyDuiLayoutEnum

   Bases: :py:obj:`enum.Enum`

   Layout type enum

   .. attribute:: Undefine

      default

   .. attribute:: HLayout

      horizontal layout

   .. attribute:: VLayout

      vertical layout

   .. py:attribute:: NotLayout
      :annotation: = 0

      

   .. py:attribute:: HLayout
      :annotation: = 1

      

   .. py:attribute:: VLayout
      :annotation: = 2

      

   .. py:attribute:: FitLayout
      :annotation: = 3

      

   .. py:attribute:: FixedLayout
      :annotation: = 4

      

   .. py:attribute:: CustomLayout
      :annotation: = 10

      


.. py:class:: PyDuiTextAlign

   Bases: :py:obj:`enum.Enum`

   Text align

   .. py:attribute:: CENTER
      :annotation: = [0]

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:function:: Text2TextAlign(text: str) -> PyDuiTextAlign


.. py:function:: Text2WrapMode(text: str) -> gi.repository.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> gi.repository.Pango.EllipsizeMode


.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: gi.repository.Gdk.RBGA, x: float, y: float, w: float, h: float, canvas_width: float, canvas_height: float)
      :staticmethod:


   .. py:method:: DrawImage(ctx: pydui.core.widget.cairo.Context, image: str, xy: tuple[float, float], wh: tuple[float, float])
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, text: str, font: str, font_size: int, color: gi.repository.Gdk.RBGA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiTextAlign, pydui.core.widget.PyDuiTextAlign] = (PyDuiTextAlign.CENTER, PyDuiTextAlign.CENTER), ellipsis_mode: gi.repository.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: gi.repository.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 0.0)
      :staticmethod:


   .. py:method:: EstimateText(ctx: pydui.core.widget.cairo.Context, text: str, font_desc: str, limit_width: float = None, limit_height: float = None) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget, layout_class: pydui.core.base.PyDuiLayoutEnum = PyDuiLayoutEnum.NotLayout)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: set_render_manager(render_manager: PyDuiRenderManager)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: layout_class() -> pydui.core.base.PyDuiLayoutEnum
      :property:


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> gi.repository.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiRenderManager(window: PyDuiWindow, loader: PyDuiResourceLoader)

   Bases: :py:obj:`object`

   Render manager

   .. py:method:: get_resource_loader()


   .. py:method:: default_fontcolor() -> gi.repository.Gdk.RGBA
      :property:

      return default font color, default is Gdk.RGBA(0.0, 0.0, 0.0, 1.0)

      :returns: return default font color
      :rtype: Gdk.RGBA


   .. py:method:: default_font_desc() -> str
      :property:

      return font desc in format f"{font_family} {font_size}"

      :returns: font desc
      :rtype: str


   .. py:method:: default_fontfamily() -> str
      :property:

      return default font family, default is Arial

      :returns: font family
      :rtype: str


   .. py:method:: default_fontsize() -> int
      :property:

      return default font size, default is 16

      :returns: font size
      :rtype: int


   .. py:method:: set_rootview(rootview: pydui.core.layout.PyDuiLayout)

      set window root view

      :param rootview: widnow root view
      :type rootview: PyDuiWidget


   .. py:method:: get_widget(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get widget by widget id

      :param widget_id: widget id
      :type widget_id: str



.. py:class:: PyDuiRenderCanvas(ondraw: callable, css=None, border_width=0)

   Bases: :py:obj:`gi.repository.Gtk.Frame`

   Render canvas

   .. py:method:: redraw()



