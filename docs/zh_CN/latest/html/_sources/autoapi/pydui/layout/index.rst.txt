:py:mod:`pydui.layout`
======================

.. py:module:: pydui.layout

.. autoapi-nested-parse::

   Layout Module



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   fit_layout/index.rst
   fixed_layout/index.rst
   hlayout/index.rst
   vlayout/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pydui.layout.PyDuiFitLayout
   pydui.layout.PyDuiLayoutEstimateResult
   pydui.layout.PyDuiLayout
   pydui.layout.PyDuiLayoutEnum
   pydui.layout.PyDuiTextAlign
   pydui.layout.PyDuiRender
   pydui.layout.PyDuiConstraint
   pydui.layout.PyDuiWidget
   pydui.layout.PyDuiFixedLayout
   pydui.layout.PyDuiLayoutEnum
   pydui.layout.PyDuiTextAlign
   pydui.layout.PyDuiLayoutEstimateResult
   pydui.layout.PyDuiLayout
   pydui.layout.PyDuiRender
   pydui.layout.PyDuiConstraint
   pydui.layout.PyDuiWidget
   pydui.layout.PyDuiHLayout
   pydui.layout.PyDuiLayoutEstimateResult
   pydui.layout.PyDuiLayout
   pydui.layout.PyDuiLayoutEnum
   pydui.layout.PyDuiTextAlign
   pydui.layout.PyDuiRender
   pydui.layout.PyDuiConstraint
   pydui.layout.PyDuiWidget
   pydui.layout.PyDuiVLayout
   pydui.layout.PyDuiLayoutEstimateResult
   pydui.layout.PyDuiLayout
   pydui.layout.PyDuiLayoutEnum
   pydui.layout.PyDuiTextAlign
   pydui.layout.PyDuiRender
   pydui.layout.PyDuiConstraint
   pydui.layout.PyDuiWidget



Functions
~~~~~~~~~

.. autoapisummary::

   pydui.layout.Text2TextAlign
   pydui.layout.Text2WrapMode
   pydui.layout.Text2EllipsizeMode
   pydui.layout.Text2TextAlign
   pydui.layout.Text2WrapMode
   pydui.layout.Text2EllipsizeMode
   pydui.layout.Text2TextAlign
   pydui.layout.Text2WrapMode
   pydui.layout.Text2EllipsizeMode
   pydui.layout.Text2TextAlign
   pydui.layout.Text2WrapMode
   pydui.layout.Text2EllipsizeMode



.. py:class:: PyDuiFitLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   FitLayout implement


.. py:class:: PyDuiLayoutEstimateResult

   Estimate layout result

   .. py:attribute:: auto_layout_count
      :annotation: :int = 0

      

   .. py:attribute:: auto_layout_value
      :annotation: :int = 0

      

   .. py:attribute:: estimate_items
      :annotation: :list[int]

      


.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, layout_class: pydui.core.widget.PyDuiLayoutEnum, custom_gtk_widget: gi.repository.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]



.. py:class:: PyDuiLayoutEnum

   Bases: :py:obj:`enum.Enum`

   Layout type enum

   .. attribute:: Undefine

      default

   .. attribute:: HLayout

      horizontal layout

   .. attribute:: VLayout

      vertical layout

   .. py:attribute:: NotLayout
      :annotation: = 0

      

   .. py:attribute:: HLayout
      :annotation: = 1

      

   .. py:attribute:: VLayout
      :annotation: = 2

      

   .. py:attribute:: FitLayout
      :annotation: = 3

      

   .. py:attribute:: FixedLayout
      :annotation: = 4

      

   .. py:attribute:: CustomLayout
      :annotation: = 10

      


.. py:class:: PyDuiTextAlign

   Bases: :py:obj:`enum.Enum`

   Text align

   .. py:attribute:: CENTER
      :annotation: = [0]

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:function:: Text2TextAlign(text: str) -> PyDuiTextAlign


.. py:function:: Text2WrapMode(text: str) -> gi.repository.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> gi.repository.Pango.EllipsizeMode


.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: gi.repository.Gdk.RBGA, x: float, y: float, w: float, h: float, canvas_width: float, canvas_height: float)
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, text: str, font: str, font_size: int, color: gi.repository.Gdk.RBGA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiTextAlign, pydui.core.widget.PyDuiTextAlign] = (PyDuiTextAlign.CENTER, PyDuiTextAlign.CENTER), ellipsis_mode: gi.repository.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: gi.repository.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 0.0)
      :staticmethod:


   .. py:method:: EstimateText(ctx: pydui.core.widget.cairo.Context, text: str, font_desc: str, limit_width: float = None, limit_height: float = None) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget, layout_class: pydui.core.base.PyDuiLayoutEnum = PyDuiLayoutEnum.NotLayout)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: set_render_manager(render_manager: PyDuiRenderManager)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: layout_class() -> pydui.core.base.PyDuiLayoutEnum
      :property:


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> gi.repository.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiFixedLayout(parent: pydui.core.layout.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   FixedLayout implement


.. py:class:: PyDuiLayoutEnum

   Bases: :py:obj:`enum.Enum`

   Layout type enum

   .. attribute:: Undefine

      default

   .. attribute:: HLayout

      horizontal layout

   .. attribute:: VLayout

      vertical layout

   .. py:attribute:: NotLayout
      :annotation: = 0

      

   .. py:attribute:: HLayout
      :annotation: = 1

      

   .. py:attribute:: VLayout
      :annotation: = 2

      

   .. py:attribute:: FitLayout
      :annotation: = 3

      

   .. py:attribute:: FixedLayout
      :annotation: = 4

      

   .. py:attribute:: CustomLayout
      :annotation: = 10

      


.. py:class:: PyDuiTextAlign

   Bases: :py:obj:`enum.Enum`

   Text align

   .. py:attribute:: CENTER
      :annotation: = [0]

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:function:: Text2TextAlign(text: str) -> PyDuiTextAlign


.. py:function:: Text2WrapMode(text: str) -> gi.repository.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> gi.repository.Pango.EllipsizeMode


.. py:class:: PyDuiLayoutEstimateResult

   Estimate layout result

   .. py:attribute:: auto_layout_count
      :annotation: :int = 0

      

   .. py:attribute:: auto_layout_value
      :annotation: :int = 0

      

   .. py:attribute:: estimate_items
      :annotation: :list[int]

      


.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, layout_class: pydui.core.widget.PyDuiLayoutEnum, custom_gtk_widget: gi.repository.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]



.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: gi.repository.Gdk.RBGA, x: float, y: float, w: float, h: float, canvas_width: float, canvas_height: float)
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, text: str, font: str, font_size: int, color: gi.repository.Gdk.RBGA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiTextAlign, pydui.core.widget.PyDuiTextAlign] = (PyDuiTextAlign.CENTER, PyDuiTextAlign.CENTER), ellipsis_mode: gi.repository.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: gi.repository.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 0.0)
      :staticmethod:


   .. py:method:: EstimateText(ctx: pydui.core.widget.cairo.Context, text: str, font_desc: str, limit_width: float = None, limit_height: float = None) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget, layout_class: pydui.core.base.PyDuiLayoutEnum = PyDuiLayoutEnum.NotLayout)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: set_render_manager(render_manager: PyDuiRenderManager)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: layout_class() -> pydui.core.base.PyDuiLayoutEnum
      :property:


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> gi.repository.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiHLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Horizontal layout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)



.. py:class:: PyDuiLayoutEstimateResult

   Estimate layout result

   .. py:attribute:: auto_layout_count
      :annotation: :int = 0

      

   .. py:attribute:: auto_layout_value
      :annotation: :int = 0

      

   .. py:attribute:: estimate_items
      :annotation: :list[int]

      


.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, layout_class: pydui.core.widget.PyDuiLayoutEnum, custom_gtk_widget: gi.repository.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]



.. py:class:: PyDuiLayoutEnum

   Bases: :py:obj:`enum.Enum`

   Layout type enum

   .. attribute:: Undefine

      default

   .. attribute:: HLayout

      horizontal layout

   .. attribute:: VLayout

      vertical layout

   .. py:attribute:: NotLayout
      :annotation: = 0

      

   .. py:attribute:: HLayout
      :annotation: = 1

      

   .. py:attribute:: VLayout
      :annotation: = 2

      

   .. py:attribute:: FitLayout
      :annotation: = 3

      

   .. py:attribute:: FixedLayout
      :annotation: = 4

      

   .. py:attribute:: CustomLayout
      :annotation: = 10

      


.. py:class:: PyDuiTextAlign

   Bases: :py:obj:`enum.Enum`

   Text align

   .. py:attribute:: CENTER
      :annotation: = [0]

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:function:: Text2TextAlign(text: str) -> PyDuiTextAlign


.. py:function:: Text2WrapMode(text: str) -> gi.repository.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> gi.repository.Pango.EllipsizeMode


.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: gi.repository.Gdk.RBGA, x: float, y: float, w: float, h: float, canvas_width: float, canvas_height: float)
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, text: str, font: str, font_size: int, color: gi.repository.Gdk.RBGA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiTextAlign, pydui.core.widget.PyDuiTextAlign] = (PyDuiTextAlign.CENTER, PyDuiTextAlign.CENTER), ellipsis_mode: gi.repository.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: gi.repository.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 0.0)
      :staticmethod:


   .. py:method:: EstimateText(ctx: pydui.core.widget.cairo.Context, text: str, font_desc: str, limit_width: float = None, limit_height: float = None) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget, layout_class: pydui.core.base.PyDuiLayoutEnum = PyDuiLayoutEnum.NotLayout)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: set_render_manager(render_manager: PyDuiRenderManager)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: layout_class() -> pydui.core.base.PyDuiLayoutEnum
      :property:


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> gi.repository.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:



.. py:class:: PyDuiVLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Vertical layout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)



.. py:class:: PyDuiLayoutEstimateResult

   Estimate layout result

   .. py:attribute:: auto_layout_count
      :annotation: :int = 0

      

   .. py:attribute:: auto_layout_value
      :annotation: :int = 0

      

   .. py:attribute:: estimate_items
      :annotation: :list[int]

      


.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, layout_class: pydui.core.widget.PyDuiLayoutEnum, custom_gtk_widget: gi.repository.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.Optional[pydui.core.widget.PyDuiWidget]

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]



.. py:class:: PyDuiLayoutEnum

   Bases: :py:obj:`enum.Enum`

   Layout type enum

   .. attribute:: Undefine

      default

   .. attribute:: HLayout

      horizontal layout

   .. attribute:: VLayout

      vertical layout

   .. py:attribute:: NotLayout
      :annotation: = 0

      

   .. py:attribute:: HLayout
      :annotation: = 1

      

   .. py:attribute:: VLayout
      :annotation: = 2

      

   .. py:attribute:: FitLayout
      :annotation: = 3

      

   .. py:attribute:: FixedLayout
      :annotation: = 4

      

   .. py:attribute:: CustomLayout
      :annotation: = 10

      


.. py:class:: PyDuiTextAlign

   Bases: :py:obj:`enum.Enum`

   Text align

   .. py:attribute:: CENTER
      :annotation: = [0]

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:function:: Text2TextAlign(text: str) -> PyDuiTextAlign


.. py:function:: Text2WrapMode(text: str) -> gi.repository.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> gi.repository.Pango.EllipsizeMode


.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: gi.repository.Gdk.RBGA, x: float, y: float, w: float, h: float, canvas_width: float, canvas_height: float)
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, text: str, font: str, font_size: int, color: gi.repository.Gdk.RBGA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiTextAlign, pydui.core.widget.PyDuiTextAlign] = (PyDuiTextAlign.CENTER, PyDuiTextAlign.CENTER), ellipsis_mode: gi.repository.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: gi.repository.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 0.0)
      :staticmethod:


   .. py:method:: EstimateText(ctx: pydui.core.widget.cairo.Context, text: str, font_desc: str, limit_width: float = None, limit_height: float = None) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget, layout_class: pydui.core.base.PyDuiLayoutEnum = PyDuiLayoutEnum.NotLayout)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: set_render_manager(render_manager: PyDuiRenderManager)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: cairo.Context, x: float, y: float, width: float, height: float, canvas_width: float, canvas_height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: set_focus()


   .. py:method:: layout_class() -> pydui.core.base.PyDuiLayoutEnum
      :property:


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> gi.repository.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:



