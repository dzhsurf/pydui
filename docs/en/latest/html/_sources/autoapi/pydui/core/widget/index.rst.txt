:py:mod:`pydui.core.widget`
===========================

.. py:module:: pydui.core.widget


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pydui.core.widget.PyDuiConstraint
   pydui.core.widget.PyDuiWidget




.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: build_name() -> str
      :staticmethod:


   .. py:method:: find_widget_default_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: find_widget_mouse_event_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: set_render_manager(render_manager: pydui.core.render_base.PyDuiRenderManagerBase)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkcolor(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkimage(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.base.PyDuiLayoutConstraint)


   .. py:method:: estimate_size(parent_width: float, parent_height: float, constraint: pydui.core.base.PyDuiLayoutConstraint) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: enable_mouse_event() -> bool
      :property:


   .. py:method:: on_mouse_enter()


   .. py:method:: on_mouse_leave(next_widget: PyDuiWidget)


   .. py:method:: on_mouse_move(x: float, y: float)


   .. py:method:: on_lbutton_press(x: float, y: float)


   .. py:method:: on_lbutton_release(x: float, y: float)


   .. py:method:: on_rbutton_press(x: float, y: float)


   .. py:method:: on_rbutton_release(x: float, y: float)


   .. py:method:: on_lbutton_click(x: float, y: float)


   .. py:method:: on_rbutton_click(x: float, y: float)


   .. py:method:: on_l2button_click(x: float, y: float)


   .. py:method:: on_r2button_click(x: float, y: float)


   .. py:method:: on_l3button_click(x: float, y: float)


   .. py:method:: on_r3button_click(x: float, y: float)


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: disconnect(signal_name: str, callback: callable)


   .. py:method:: disconnect_signal(signal_name: str)


   .. py:method:: emit(signal_name: str, *args: Any, **kwargs: Any)


   .. py:method:: set_focus()


   .. py:method:: contain_pos(x: float, y: float) -> bool


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: autofit() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> pydui.core.import_gtk.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:


   .. py:method:: corner() -> tuple[float, float, float, float]
      :property:



