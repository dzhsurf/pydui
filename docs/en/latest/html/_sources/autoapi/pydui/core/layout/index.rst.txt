:py:mod:`pydui.core.layout`
===========================

.. py:module:: pydui.core.layout


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pydui.core.layout.PyDuiLayout




.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, custom_gtk_widget: pydui.core.widget.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: find_widget_by_pos(x: float, y: float, *, filter: Callable[[pydui.core.widget.PyDuiWidget], bool] = PyDuiWidget.find_widget_default_filter) -> pydui.core.widget.PyDuiWidget

      Get child by position


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.PyDuiWidget

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]


   .. py:method:: halign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: valign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: fitrule() -> list[str]
      :property:



