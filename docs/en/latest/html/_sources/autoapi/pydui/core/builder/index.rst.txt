:py:mod:`pydui.core.builder`
============================

.. py:module:: pydui.core.builder

.. autoapi-nested-parse::

   PyDuiBuilder module

   PyDuiBuilder provider construct Widget from xml resource.
   The resource xml file read from local path by default.
   But you can custom the resource provider to compose the ui resources.

   Example::

       PyDuiBuilder.build_window(path='res/main.xml')




Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pydui.core.builder.PyDuiBuilder




Attributes
~~~~~~~~~~

.. autoapisummary::

   pydui.core.builder.INTERNAL_WIDGET_LIST
   pydui.core.builder.INTERNAL_WIDGET_TABLE
   pydui.core.builder.INTERNAL_WIDGET_INIT


.. py:data:: INTERNAL_WIDGET_LIST
   

   

.. py:data:: INTERNAL_WIDGET_TABLE
   

   

.. py:data:: INTERNAL_WIDGET_INIT
   :annotation: = False

   

.. py:class:: PyDuiBuilder

   Build Widget, Window from xml resource

   .. py:method:: register_resource_loader(loader: pydui.core.window.PyDuiResourceLoader)


   .. py:method:: get_loader() -> pydui.core.window.PyDuiResourceLoader


   .. py:method:: build_widget(path: str) -> pydui.core.window.PyDuiWidget

      Build widget from path

      :param path: xml resource path
      :type path: str

      :returns: return the widget
      :rtype: PyDuiWidget


   .. py:method:: build_window(path: str, handler: pydui.core.window.Type[pydui.core.window.PyDuiWindowHandler]) -> pydui.core.window.PyDuiWindow

      Build window from path and handler

      :param path: xml resource path
      :type path: str
      :param handler: handler class
      :type handler: Type[PyDuiWindowHandler]

      :returns: return window object.
      :rtype: PyDuiWindow



