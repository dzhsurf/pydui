:py:mod:`pydui.layout`
======================

.. py:module:: pydui.layout

.. autoapi-nested-parse::

   Layout Module



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   fixed_layout/index.rst
   hlayout/index.rst
   vlayout/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pydui.layout.PyDuiFixedLayout
   pydui.layout.PyDuiAlign
   pydui.layout.PyDuiClickType
   pydui.layout.PyDuiLayoutConstraint
   pydui.layout.PyDuiLayout
   pydui.layout.PyDuiRender
   pydui.layout.PyDuiRenderManagerBase
   pydui.layout.PyDuiConstraint
   pydui.layout.PyDuiWidget
   pydui.layout.PyDuiHLayout
   pydui.layout.PyDuiLayout
   pydui.layout.PyDuiAlign
   pydui.layout.PyDuiClickType
   pydui.layout.PyDuiLayoutConstraint
   pydui.layout.PyDuiRender
   pydui.layout.PyDuiRenderManagerBase
   pydui.layout.PyDuiConstraint
   pydui.layout.PyDuiWidget
   pydui.layout.PyDuiVLayout
   pydui.layout.PyDuiLayout
   pydui.layout.PyDuiAlign
   pydui.layout.PyDuiClickType
   pydui.layout.PyDuiLayoutConstraint
   pydui.layout.PyDuiRender
   pydui.layout.PyDuiRenderManagerBase
   pydui.layout.PyDuiConstraint
   pydui.layout.PyDuiWidget



Functions
~~~~~~~~~

.. autoapisummary::

   pydui.layout.Text2PyDuiAlign
   pydui.layout.Text2WrapMode
   pydui.layout.Text2EllipsizeMode
   pydui.layout.Text2PyDuiAlign
   pydui.layout.Text2WrapMode
   pydui.layout.Text2EllipsizeMode
   pydui.layout.Text2PyDuiAlign
   pydui.layout.Text2WrapMode
   pydui.layout.Text2EllipsizeMode



.. py:class:: PyDuiFixedLayout(parent: pydui.core.layout.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   FixedLayout implement

   .. py:method:: build_name() -> str
      :staticmethod:



.. py:class:: PyDuiAlign

   Bases: :py:obj:`enum.Enum`

   Align type

   .. py:attribute:: CENTER
      :annotation: = 0

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:class:: PyDuiClickType

   Bases: :py:obj:`enum.Enum`

   Click Type

   .. py:attribute:: NONE
      :annotation: = 0

      

   .. py:attribute:: CLICK
      :annotation: = 1

      

   .. py:attribute:: DBCLICK
      :annotation: = 2

      


.. py:class:: PyDuiLayoutConstraint(w: float = -1, h: float = -1)

   Bases: :py:obj:`object`

   Layout constraint
   if the value set to -1, it means no limit

   .. py:attribute:: width
      :annotation: :float

      

   .. py:attribute:: height
      :annotation: :float

      

   .. py:method:: merge(constraint: PyDuiLayoutConstraint)



.. py:function:: Text2PyDuiAlign(text: str) -> PyDuiAlign


.. py:function:: Text2WrapMode(text: str) -> pydui.core.import_gtk.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> pydui.core.import_gtk.Pango.EllipsizeMode


.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, custom_gtk_widget: pydui.core.widget.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: find_widget_by_pos(x: float, y: float, *, filter: Callable[[pydui.core.widget.PyDuiWidget], bool] = PyDuiWidget.find_widget_default_filter) -> pydui.core.widget.PyDuiWidget

      Get child by position


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.PyDuiWidget

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]


   .. py:method:: halign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: valign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: fitrule() -> list[str]
      :property:



.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: pydui.core.widget.Gdk.RGBA, x: float, y: float, w: float, h: float)
      :staticmethod:


   .. py:method:: EstimateImageSize(loader: pydui.core.resource_loader.PyDuiResourceLoader, path: str, limit_width: float, limit_height: float) -> Tuple[float, float]
      :staticmethod:


   .. py:method:: DrawImage(ctx: pydui.core.widget.cairo.Context, loader: pydui.core.resource_loader.PyDuiResourceLoader, path: str, xy: tuple[float, float], wh: tuple[float, float], corner: tuple[float, float, float, float] = (0.0, 0.0, 0.0, 0.0))
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, *, text: str, font: str, font_size: int, color: pydui.core.widget.Gdk.RGBA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiAlign, pydui.core.widget.PyDuiAlign] = (PyDuiAlign.CENTER, PyDuiAlign.CENTER), ellipsis_mode: pydui.core.widget.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: pydui.core.widget.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 1.25)
      :staticmethod:


   .. py:method:: EstimateTextSize(ctx: pydui.core.widget.cairo.Context, *, text: str, font: str, fontsize: int, limit_wh: Tuple[float, float] = (-1, -1), hvalign: tuple[pydui.core.widget.PyDuiAlign, pydui.core.widget.PyDuiAlign] = (PyDuiAlign.CENTER, PyDuiAlign.CENTER), ellipsis_mode: pydui.core.widget.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: pydui.core.widget.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 1.25) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiRenderManagerBase

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: get_resource_loader() -> pydui.core.resource_loader.PyDuiResourceLoader
      :abstractmethod:


   .. py:method:: notify_redraw()
      :abstractmethod:


   .. py:method:: get_render_context() -> pydui.core.import_gtk.cairo.Context
      :abstractmethod:


   .. py:method:: cancel_task(task_id: str)
      :abstractmethod:


   .. py:method:: post_task(fn: callable, *args: Any, **kwargs: Any)
      :abstractmethod:


   .. py:method:: post_task_with_delay(delay: float, fn: callable, *args: Any, **kwargs: Any)
      :abstractmethod:



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: build_name() -> str
      :staticmethod:


   .. py:method:: find_widget_default_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: find_widget_mouse_event_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: set_render_manager(render_manager: pydui.core.render_base.PyDuiRenderManagerBase)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkcolor(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkimage(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.base.PyDuiLayoutConstraint)


   .. py:method:: estimate_size(parent_width: float, parent_height: float, constraint: pydui.core.base.PyDuiLayoutConstraint) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: enable_mouse_event() -> bool
      :property:


   .. py:method:: on_mouse_enter()


   .. py:method:: on_mouse_leave(next_widget: PyDuiWidget)


   .. py:method:: on_mouse_move(x: float, y: float)


   .. py:method:: on_lbutton_press(x: float, y: float)


   .. py:method:: on_lbutton_release(x: float, y: float)


   .. py:method:: on_rbutton_press(x: float, y: float)


   .. py:method:: on_rbutton_release(x: float, y: float)


   .. py:method:: on_lbutton_click(x: float, y: float)


   .. py:method:: on_rbutton_click(x: float, y: float)


   .. py:method:: on_l2button_click(x: float, y: float)


   .. py:method:: on_r2button_click(x: float, y: float)


   .. py:method:: on_l3button_click(x: float, y: float)


   .. py:method:: on_r3button_click(x: float, y: float)


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: disconnect(signal_name: str, callback: callable)


   .. py:method:: disconnect_signal(signal_name: str)


   .. py:method:: emit(signal_name: str, *args: Any, **kwargs: Any)


   .. py:method:: set_focus()


   .. py:method:: contain_pos(x: float, y: float) -> bool


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: autofit() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> pydui.core.import_gtk.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:


   .. py:method:: corner() -> tuple[float, float, float, float]
      :property:



.. py:class:: PyDuiHLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Horizontal layout

   .. py:method:: build_name() -> str
      :staticmethod:


   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint) -> Tuple[float, float]


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint)



.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, custom_gtk_widget: pydui.core.widget.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: find_widget_by_pos(x: float, y: float, *, filter: Callable[[pydui.core.widget.PyDuiWidget], bool] = PyDuiWidget.find_widget_default_filter) -> pydui.core.widget.PyDuiWidget

      Get child by position


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.PyDuiWidget

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]


   .. py:method:: halign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: valign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: fitrule() -> list[str]
      :property:



.. py:class:: PyDuiAlign

   Bases: :py:obj:`enum.Enum`

   Align type

   .. py:attribute:: CENTER
      :annotation: = 0

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:class:: PyDuiClickType

   Bases: :py:obj:`enum.Enum`

   Click Type

   .. py:attribute:: NONE
      :annotation: = 0

      

   .. py:attribute:: CLICK
      :annotation: = 1

      

   .. py:attribute:: DBCLICK
      :annotation: = 2

      


.. py:class:: PyDuiLayoutConstraint(w: float = -1, h: float = -1)

   Bases: :py:obj:`object`

   Layout constraint
   if the value set to -1, it means no limit

   .. py:attribute:: width
      :annotation: :float

      

   .. py:attribute:: height
      :annotation: :float

      

   .. py:method:: merge(constraint: PyDuiLayoutConstraint)



.. py:function:: Text2PyDuiAlign(text: str) -> PyDuiAlign


.. py:function:: Text2WrapMode(text: str) -> pydui.core.import_gtk.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> pydui.core.import_gtk.Pango.EllipsizeMode


.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: pydui.core.widget.Gdk.RGBA, x: float, y: float, w: float, h: float)
      :staticmethod:


   .. py:method:: EstimateImageSize(loader: pydui.core.resource_loader.PyDuiResourceLoader, path: str, limit_width: float, limit_height: float) -> Tuple[float, float]
      :staticmethod:


   .. py:method:: DrawImage(ctx: pydui.core.widget.cairo.Context, loader: pydui.core.resource_loader.PyDuiResourceLoader, path: str, xy: tuple[float, float], wh: tuple[float, float], corner: tuple[float, float, float, float] = (0.0, 0.0, 0.0, 0.0))
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, *, text: str, font: str, font_size: int, color: pydui.core.widget.Gdk.RGBA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiAlign, pydui.core.widget.PyDuiAlign] = (PyDuiAlign.CENTER, PyDuiAlign.CENTER), ellipsis_mode: pydui.core.widget.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: pydui.core.widget.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 1.25)
      :staticmethod:


   .. py:method:: EstimateTextSize(ctx: pydui.core.widget.cairo.Context, *, text: str, font: str, fontsize: int, limit_wh: Tuple[float, float] = (-1, -1), hvalign: tuple[pydui.core.widget.PyDuiAlign, pydui.core.widget.PyDuiAlign] = (PyDuiAlign.CENTER, PyDuiAlign.CENTER), ellipsis_mode: pydui.core.widget.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: pydui.core.widget.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 1.25) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiRenderManagerBase

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: get_resource_loader() -> pydui.core.resource_loader.PyDuiResourceLoader
      :abstractmethod:


   .. py:method:: notify_redraw()
      :abstractmethod:


   .. py:method:: get_render_context() -> pydui.core.import_gtk.cairo.Context
      :abstractmethod:


   .. py:method:: cancel_task(task_id: str)
      :abstractmethod:


   .. py:method:: post_task(fn: callable, *args: Any, **kwargs: Any)
      :abstractmethod:


   .. py:method:: post_task_with_delay(delay: float, fn: callable, *args: Any, **kwargs: Any)
      :abstractmethod:



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: build_name() -> str
      :staticmethod:


   .. py:method:: find_widget_default_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: find_widget_mouse_event_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: set_render_manager(render_manager: pydui.core.render_base.PyDuiRenderManagerBase)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkcolor(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkimage(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.base.PyDuiLayoutConstraint)


   .. py:method:: estimate_size(parent_width: float, parent_height: float, constraint: pydui.core.base.PyDuiLayoutConstraint) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: enable_mouse_event() -> bool
      :property:


   .. py:method:: on_mouse_enter()


   .. py:method:: on_mouse_leave(next_widget: PyDuiWidget)


   .. py:method:: on_mouse_move(x: float, y: float)


   .. py:method:: on_lbutton_press(x: float, y: float)


   .. py:method:: on_lbutton_release(x: float, y: float)


   .. py:method:: on_rbutton_press(x: float, y: float)


   .. py:method:: on_rbutton_release(x: float, y: float)


   .. py:method:: on_lbutton_click(x: float, y: float)


   .. py:method:: on_rbutton_click(x: float, y: float)


   .. py:method:: on_l2button_click(x: float, y: float)


   .. py:method:: on_r2button_click(x: float, y: float)


   .. py:method:: on_l3button_click(x: float, y: float)


   .. py:method:: on_r3button_click(x: float, y: float)


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: disconnect(signal_name: str, callback: callable)


   .. py:method:: disconnect_signal(signal_name: str)


   .. py:method:: emit(signal_name: str, *args: Any, **kwargs: Any)


   .. py:method:: set_focus()


   .. py:method:: contain_pos(x: float, y: float) -> bool


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: autofit() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> pydui.core.import_gtk.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:


   .. py:method:: corner() -> tuple[float, float, float, float]
      :property:



.. py:class:: PyDuiVLayout(parent: pydui.core.widget.PyDuiWidget)

   Bases: :py:obj:`pydui.core.layout.PyDuiLayout`

   Vertical layout

   .. py:method:: build_name() -> str
      :staticmethod:


   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: estimate_size(parent_width: float, parent_height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint) -> Tuple[float, float]


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint)



.. py:class:: PyDuiLayout(parent: pydui.core.widget.PyDuiWidget, custom_gtk_widget: pydui.core.widget.Gtk.Widget = None)

   Bases: :py:obj:`pydui.core.widget.PyDuiWidget`

   Layout base class, all layouts inherit from PyDuiLayout

   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: draw(ctx: pydui.core.widget.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.widget.PyDuiLayoutConstraint)


   .. py:method:: get_children_range_fixed_width(start, stop) -> float


   .. py:method:: get_children_range_fixed_height(start, stop) -> float


   .. py:method:: get_child(widget_id: str) -> pydui.core.widget.PyDuiWidget

      Get child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: find_widget_by_pos(x: float, y: float, *, filter: Callable[[pydui.core.widget.PyDuiWidget], bool] = PyDuiWidget.find_widget_default_filter) -> pydui.core.widget.PyDuiWidget

      Get child by position


   .. py:method:: get_child_at(index: int) -> pydui.core.widget.PyDuiWidget

      Get child widget at index

      if the index overbound, it will return None.

      :param index: child index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: add_child(child: pydui.core.widget.PyDuiWidget)

      Add child widget.

      if child has been added, ignore.

      :param child: child widget
      :type child: PyDuiWidget


   .. py:method:: add_child_at(child: pydui.core.widget.PyDuiWidget, index: int)

      Add child widget at index

      if the index overbound, it will add widget to last position.

      :param child: child widget
      :type child: PyDuiWidget
      :param index: target index
      :type index: int

      :returns: return widget object.
      :rtype: PyDuiWidget


   .. py:method:: remove_child(widget_id: str)

      Remove child widget by widget_id

      :param widget_id: widget id
      :type widget_id: str


   .. py:method:: remove_child_at(index: int)

      Remove child widget at index

      if the index overbound, do nothing.

      :param index: widget index
      :type index: int


   .. py:method:: child_count() -> int
      :property:

      Return child count

      :returns: return child widget count.
      :rtype: int


   .. py:method:: padding() -> tuple[float, float, float, float]
      :property:

      Return widget padding

      The value in tuple means [left, top, right, bottom]

      :returns: return padding.
      :rtype: tuple[float, float, float, float]


   .. py:method:: halign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: valign() -> pydui.core.widget.PyDuiAlign
      :property:


   .. py:method:: fitrule() -> list[str]
      :property:



.. py:class:: PyDuiAlign

   Bases: :py:obj:`enum.Enum`

   Align type

   .. py:attribute:: CENTER
      :annotation: = 0

      

   .. py:attribute:: START
      :annotation: = 1

      

   .. py:attribute:: END
      :annotation: = 2

      


.. py:class:: PyDuiClickType

   Bases: :py:obj:`enum.Enum`

   Click Type

   .. py:attribute:: NONE
      :annotation: = 0

      

   .. py:attribute:: CLICK
      :annotation: = 1

      

   .. py:attribute:: DBCLICK
      :annotation: = 2

      


.. py:class:: PyDuiLayoutConstraint(w: float = -1, h: float = -1)

   Bases: :py:obj:`object`

   Layout constraint
   if the value set to -1, it means no limit

   .. py:attribute:: width
      :annotation: :float

      

   .. py:attribute:: height
      :annotation: :float

      

   .. py:method:: merge(constraint: PyDuiLayoutConstraint)



.. py:function:: Text2PyDuiAlign(text: str) -> PyDuiAlign


.. py:function:: Text2WrapMode(text: str) -> pydui.core.import_gtk.Pango.WrapMode


.. py:function:: Text2EllipsizeMode(text: str) -> pydui.core.import_gtk.Pango.EllipsizeMode


.. py:class:: PyDuiRender

   Render static function

   .. py:method:: Rectangle(ctx: pydui.core.widget.cairo.Context, color: pydui.core.widget.Gdk.RGBA, x: float, y: float, w: float, h: float)
      :staticmethod:


   .. py:method:: EstimateImageSize(loader: pydui.core.resource_loader.PyDuiResourceLoader, path: str, limit_width: float, limit_height: float) -> Tuple[float, float]
      :staticmethod:


   .. py:method:: DrawImage(ctx: pydui.core.widget.cairo.Context, loader: pydui.core.resource_loader.PyDuiResourceLoader, path: str, xy: tuple[float, float], wh: tuple[float, float], corner: tuple[float, float, float, float] = (0.0, 0.0, 0.0, 0.0))
      :staticmethod:


   .. py:method:: DrawText(ctx: pydui.core.widget.cairo.Context, *, text: str, font: str, font_size: int, color: pydui.core.widget.Gdk.RGBA, xy: tuple[float, float], wh: tuple[float, float], hvalign: tuple[pydui.core.widget.PyDuiAlign, pydui.core.widget.PyDuiAlign] = (PyDuiAlign.CENTER, PyDuiAlign.CENTER), ellipsis_mode: pydui.core.widget.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: pydui.core.widget.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 1.25)
      :staticmethod:


   .. py:method:: EstimateTextSize(ctx: pydui.core.widget.cairo.Context, *, text: str, font: str, fontsize: int, limit_wh: Tuple[float, float] = (-1, -1), hvalign: tuple[pydui.core.widget.PyDuiAlign, pydui.core.widget.PyDuiAlign] = (PyDuiAlign.CENTER, PyDuiAlign.CENTER), ellipsis_mode: pydui.core.widget.Pango.EllipsizeMode = Pango.EllipsizeMode.END, wrap_mode: pydui.core.widget.Pango.WrapMode = Pango.WrapMode.WORD, line_spacing: float = 1.25) -> tuple[float, float]
      :staticmethod:

      Estimate text size



.. py:class:: PyDuiRenderManagerBase

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: get_resource_loader() -> pydui.core.resource_loader.PyDuiResourceLoader
      :abstractmethod:


   .. py:method:: notify_redraw()
      :abstractmethod:


   .. py:method:: get_render_context() -> pydui.core.import_gtk.cairo.Context
      :abstractmethod:


   .. py:method:: cancel_task(task_id: str)
      :abstractmethod:


   .. py:method:: post_task(fn: callable, *args: Any, **kwargs: Any)
      :abstractmethod:


   .. py:method:: post_task_with_delay(delay: float, fn: callable, *args: Any, **kwargs: Any)
      :abstractmethod:



.. py:class:: PyDuiConstraint

   Constraint dataclass

   .. py:attribute:: min_width
      :annotation: :float = 0

      

   .. py:attribute:: max_width
      :annotation: :float

      

   .. py:attribute:: min_height
      :annotation: :float = 0

      

   .. py:attribute:: max_height
      :annotation: :float

      


.. py:class:: PyDuiWidget(parent: PyDuiWidget)

   Bases: :py:obj:`object`

   Widget base class

   .. py:method:: build_name() -> str
      :staticmethod:


   .. py:method:: find_widget_default_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: find_widget_mouse_event_filter(widget: PyDuiWidget) -> bool
      :staticmethod:


   .. py:method:: set_render_manager(render_manager: pydui.core.render_base.PyDuiRenderManagerBase)

      Set the render mananger

      Do not call this function yourself if you do not know what it is for!


   .. py:method:: get_render_manager()

      Get the widget render manager

      If widget is a child and not contain render manager, it will find the parent until reach to top.
      It's not a good design as it will cause problems by incorrect maintain the widget render manager.
      It will reimplment later.


   .. py:method:: get_id() -> str

      Return widget id

      :returns: widget id
      :rtype: str


   .. py:method:: draw(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkcolor(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: draw_bkimage(ctx: pydui.core.import_gtk.cairo.Context, x: float, y: float, width: float, height: float)


   .. py:method:: layout(x: float, y: float, width: float, height: float, constraint: pydui.core.base.PyDuiLayoutConstraint)


   .. py:method:: estimate_size(parent_width: float, parent_height: float, constraint: pydui.core.base.PyDuiLayoutConstraint) -> tuple[float, float]


   .. py:method:: parse_attributes(attrib: dict[str, str])

      Parse all attributes

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: parse_attrib(k: str, v: str)

      Parse single attribute

      :param attrib: attributes dict key=value ...
      :type attrib: dict[str, str]


   .. py:method:: enable_mouse_event() -> bool
      :property:


   .. py:method:: on_mouse_enter()


   .. py:method:: on_mouse_leave(next_widget: PyDuiWidget)


   .. py:method:: on_mouse_move(x: float, y: float)


   .. py:method:: on_lbutton_press(x: float, y: float)


   .. py:method:: on_lbutton_release(x: float, y: float)


   .. py:method:: on_rbutton_press(x: float, y: float)


   .. py:method:: on_rbutton_release(x: float, y: float)


   .. py:method:: on_lbutton_click(x: float, y: float)


   .. py:method:: on_rbutton_click(x: float, y: float)


   .. py:method:: on_l2button_click(x: float, y: float)


   .. py:method:: on_r2button_click(x: float, y: float)


   .. py:method:: on_l3button_click(x: float, y: float)


   .. py:method:: on_r3button_click(x: float, y: float)


   .. py:method:: connect(signal_name: str, callback: callable)


   .. py:method:: disconnect(signal_name: str, callback: callable)


   .. py:method:: disconnect_signal(signal_name: str)


   .. py:method:: emit(signal_name: str, *args: Any, **kwargs: Any)


   .. py:method:: set_focus()


   .. py:method:: contain_pos(x: float, y: float) -> bool


   .. py:method:: parent() -> PyDuiWidget
      :property:


   .. py:method:: size() -> tuple[float, float]
      :property:


   .. py:method:: width() -> float
      :property:


   .. py:method:: height() -> float
      :property:


   .. py:method:: layout_rect() -> tuple[float, float, float, float]
      :property:


   .. py:method:: fixed_size() -> tuple[float, float]
      :property:


   .. py:method:: fixed_width() -> float
      :property:


   .. py:method:: fixed_height() -> float
      :property:


   .. py:method:: xy() -> tuple[float, float]
      :property:


   .. py:method:: x() -> float
      :property:


   .. py:method:: y() -> float
      :property:


   .. py:method:: is_float() -> bool
      :property:


   .. py:method:: fixed_x() -> float
      :property:


   .. py:method:: fixed_y() -> float
      :property:


   .. py:method:: fixed_xy() -> tuple[float, float]
      :property:


   .. py:method:: margin() -> tuple[float, float, float, float]
      :property:

      Return widget margin

      The value in tuple means [left, top, right, bottom]

      :returns: return margin.
      :rtype: tuple[float, float, float, float]


   .. py:method:: constraint() -> PyDuiConstraint
      :property:


   .. py:method:: visible() -> bool
      :property:


   .. py:method:: enabled() -> bool
      :property:


   .. py:method:: autofit() -> bool
      :property:


   .. py:method:: is_focused() -> bool
      :property:


   .. py:method:: bkcolor() -> pydui.core.import_gtk.Gdk.RGBA
      :property:


   .. py:method:: bkimage() -> str
      :property:


   .. py:method:: corner() -> tuple[float, float, float, float]
      :property:



